{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\raymi\\\\Desktop\\\\MHIRJ-chart\\\\MHIRJ\\\\src\\\\Components\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { Scatter } from 'react-chartjs-2';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { saveAs } from 'file-saver';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    marginLeft: '25px',\n    marginTop: '25px'\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    width: theme.spacing(185),\n    height: theme.spacing(120)\n  }\n}));\nexport default function Chart1() {\n  _s();\n\n  const classes = useStyles();\n\n  const ChartJsImage = require('chartjs-to-image');\n\n  const [chartData2, setChartData2] = useState({});\n  let pmMessage = [];\n  const path = 'http://localhost:8000/scatter_chart_MDC_PM';\n  axios.post(path).then(res => {\n    //console.log(res,\"response\");\n    for (const dataObj of JSON.parse(res.data)) {\n      let mdc = parseInt(dataObj.MDC_Message_Cnt);\n      let pm = parseInt(dataObj.MX_actions);\n      pmMessage.push({\n        \"x\": mdc,\n        \"y\": pm\n      });\n    } //console.log(mdcMessage);\n\n\n    setChartData2({\n      labels: pmMessage,\n      datasets: [{\n        label: \"Fleet Status- Last 7 days\",\n        data: pmMessage,\n        backgroundColor: \"#d8e4f0\",\n        borderWidth: 2,\n        borderColor: \"black\",\n        pointRadius: 5\n      }]\n    });\n  }).catch(err => {//console.log(err);\n  }); //  function save(e) {\n  //     //save to png\n  //     const canvasSave = document.getElementById('chart1');\n  //     canvasSave.toBlob(function (blob) {\n  //         saveAs(blob, \"Chart1.png\")\n  //     })\n  // }\n  // const [data_chart1, setData_chart1] = useState({\n  //   select_date:\"\"\n  //   });\n  //   function submit(e){\n  //     e.preventDefault();\n  //     let mdcMessage = [];\n  //     const path='http://localhost:8000/scatter_chart_MDC_PM/'+data_chart1.select_date;\n  //     //console.log(path);\n  //     axios.post(path)\n  //       .then(res => {\n  //        // console.log(res,\"response\");\n  //         for (const dataObj of JSON.parse(res.data)) {\n  //           let mdc = parseInt(dataObj. MDC_Message_Cnt)\n  //           let pm = parseInt(dataObj.MX_actions)\n  //           mdcMessage.push({\"x\": mdc, \"y\": pm})\n  //         }\n  //         console.log(mdcMessage);\n  //         setChartData1({\n  //           labels:mdcMessage,\n  //           datasets: [\n  //             {\n  //               label:\"Fleet Status- Last 7 days\",\n  //               data: mdcMessage,\n  //               backgroundColor: \"#d8e4f0\",\n  //               borderWidth: 2,\n  //               borderColor: \"black\",\n  //               pointRadius: 5\n  //             }\n  //           ]\n  //         });\n  //       })\n  //       .catch(err => {\n  //         //console.log(err);\n  //       });\n  //   }\n  //   function handle(e){\n  //     const newdata={...data_chart1}\n  //     newdata[e.target.id] = e.target.value\n  //     setData_chart1(newdata)\n  //     //console.log(newdata)\n  //   }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 12,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.paper,\n          children: /*#__PURE__*/_jsxDEV(Scatter, {\n            id: \"chart1\",\n            data: chartData2,\n            options: {\n              scales: {\n                xAxes: [{\n                  type: 'linear',\n                  scaleLabel: {\n                    display: true,\n                    labelString: '# of MDC Messages- Last 7 days',\n                    fontStyle: 'bold',\n                    fontColor: '#001C3E'\n                  },\n                  position: 'bottom'\n                }],\n                yAxes: [{\n                  display: true,\n                  scaleLabel: {\n                    display: true,\n                    labelString: '# of MX Actions- Last 7 days',\n                    fontStyle: 'bold',\n                    fontColor: '#001C3E'\n                  }\n                }],\n                title: {\n                  display: true,\n                  text: 'Scatter Plot',\n                  fontSize: 20\n                },\n                legend: {\n                  display: true,\n                  position: 'right'\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chart1, \"f5CELcqJMUp/1mletOqdCUC6xQ0=\", false, function () {\n  return [useStyles];\n});\n\n_c = Chart1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart1\");","map":{"version":3,"sources":["C:/Users/raymi/Desktop/MHIRJ-chart/MHIRJ/src/Components/Home.js"],"names":["React","useState","useEffect","makeStyles","Paper","Grid","Scatter","TextField","Button","saveAs","axios","useStyles","theme","root","flexGrow","marginLeft","marginTop","paper","padding","spacing","textAlign","color","palette","text","secondary","width","height","Chart1","classes","ChartJsImage","require","chartData2","setChartData2","pmMessage","path","post","then","res","dataObj","JSON","parse","data","mdc","parseInt","MDC_Message_Cnt","pm","MX_actions","push","labels","datasets","label","backgroundColor","borderWidth","borderColor","pointRadius","catch","err","scales","xAxes","type","scaleLabel","display","labelString","fontStyle","fontColor","position","yAxes","title","fontSize","legend"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAIA,MAAMC,SAAS,GAAGR,UAAU,CAAES,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,CADN;AAEJC,IAAAA,UAAU,EAAE,MAFR;AAGJC,IAAAA,SAAS,EAAE;AAHP,GADiC;AAOvCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAEN,KAAK,CAACO,OAAN,CAAc,CAAd,CADJ;AAELC,IAAAA,SAAS,EAAE,QAFN;AAGLC,IAAAA,KAAK,EAAET,KAAK,CAACU,OAAN,CAAcC,IAAd,CAAmBC,SAHrB;AAILC,IAAAA,KAAK,EAAEb,KAAK,CAACO,OAAN,CAAc,GAAd,CAJF;AAKLO,IAAAA,MAAM,EAAEd,KAAK,CAACO,OAAN,CAAc,GAAd;AALH;AAPgC,CAAZ,CAAD,CAA5B;AAkBA,eAAe,SAASQ,MAAT,GAAkB;AAAA;;AAC/B,QAAMC,OAAO,GAAGjB,SAAS,EAAzB;;AACA,QAAMkB,YAAY,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B/B,QAAQ,CAAC,EAAD,CAA5C;AAEA,MAAIgC,SAAS,GAAG,EAAhB;AAEA,QAAMC,IAAI,GAAC,4CAAX;AAEAxB,EAAAA,KAAK,CAACyB,IAAN,CAAWD,IAAX,EACGE,IADH,CACQC,GAAG,IAAI;AACX;AAEA,SAAK,MAAMC,OAAX,IAAsBC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACI,IAAf,CAAtB,EAA4C;AAC1C,UAAIC,GAAG,GAAGC,QAAQ,CAACL,OAAO,CAAEM,eAAV,CAAlB;AACA,UAAIC,EAAE,GAAGF,QAAQ,CAACL,OAAO,CAACQ,UAAT,CAAjB;AACAb,MAAAA,SAAS,CAACc,IAAV,CAAe;AAAC,aAAKL,GAAN;AAAW,aAAKG;AAAhB,OAAf;AAED,KARU,CASX;;;AACAb,IAAAA,aAAa,CAAC;AACZgB,MAAAA,MAAM,EAACf,SADK;AAEZgB,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,KAAK,EAAC,2BADR;AAEET,QAAAA,IAAI,EAACR,SAFP;AAGEkB,QAAAA,eAAe,EAAE,SAHnB;AAIEC,QAAAA,WAAW,EAAE,CAJf;AAKEC,QAAAA,WAAW,EAAE,OALf;AAMEC,QAAAA,WAAW,EAAE;AANf,OADQ;AAFE,KAAD,CAAb;AAaD,GAxBH,EAyBGC,KAzBH,CAyBSC,GAAG,IAAI,CACZ;AACD,GA3BH,EAT+B,CAyCjC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAKE,sBAEE;AAAK,IAAA,SAAS,EAAE5B,OAAO,CAACf,IAAxB;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,EAAzB;AAAA,6BACA,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAA,+BACA,QAAC,KAAD;AAAO,UAAA,SAAS,EAAEe,OAAO,CAACX,KAA1B;AAAA,iCACA,QAAC,OAAD;AACc,YAAA,EAAE,EAAC,QADjB;AAEc,YAAA,IAAI,EAAEc,UAFpB;AAGc,YAAA,OAAO,EAAE;AACP0B,cAAAA,MAAM,EAAE;AACNC,gBAAAA,KAAK,EAAE,CAAC;AACJC,kBAAAA,IAAI,EAAE,QADF;AAEJC,kBAAAA,UAAU,EAAE;AACVC,oBAAAA,OAAO,EAAE,IADC;AAEVC,oBAAAA,WAAW,EAAE,gCAFH;AAGNC,oBAAAA,SAAS,EAAE,MAHL;AAINC,oBAAAA,SAAS,EAAE;AAJL,mBAFR;AASJC,kBAAAA,QAAQ,EAAE;AATN,iBAAD,CADD;AAYNC,gBAAAA,KAAK,EAAE,CAAE;AACPL,kBAAAA,OAAO,EAAE,IADF;AAEPD,kBAAAA,UAAU,EAAE;AACVC,oBAAAA,OAAO,EAAE,IADC;AAEVC,oBAAAA,WAAW,EAAE,8BAFH;AAGVC,oBAAAA,SAAS,EAAE,MAHD;AAIJC,oBAAAA,SAAS,EAAE;AAJP;AAFL,iBAAF,CAZD;AAqBRG,gBAAAA,KAAK,EAAE;AAAEN,kBAAAA,OAAO,EAAE,IAAX;AAAiBtC,kBAAAA,IAAI,EAAE,cAAvB;AAAuC6C,kBAAAA,QAAQ,EAAE;AAAjD,iBArBC;AAsBRC,gBAAAA,MAAM,EAAE;AAAER,kBAAAA,OAAO,EAAE,IAAX;AAAiBI,kBAAAA,QAAQ,EAAE;AAA3B;AAtBA;AADD;AAHvB;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UAFF;AAwCD;;GA9IuBtC,M;UACNhB,S;;;KADMgB,M","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Scatter } from 'react-chartjs-2';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { saveAs } from 'file-saver';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginLeft: '25px',\r\n    marginTop: '25px',\r\n  },\r\n  \r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n    width: theme.spacing(185),\r\n    height: theme.spacing(120),\r\n  },\r\n\r\n}));\r\n\r\n\r\nexport default function Chart1() {\r\n  const classes = useStyles();\r\n  const ChartJsImage = require('chartjs-to-image');\r\n  const [chartData2, setChartData2] = useState({});\r\n\r\n  let pmMessage = [];\r\n\r\n  const path='http://localhost:8000/scatter_chart_MDC_PM'\r\n  \r\n  axios.post(path)\r\n    .then(res => {\r\n      //console.log(res,\"response\");\r\n      \r\n      for (const dataObj of JSON.parse(res.data)) {\r\n        let mdc = parseInt(dataObj. MDC_Message_Cnt)\r\n        let pm = parseInt(dataObj.MX_actions)\r\n        pmMessage.push({\"x\": mdc, \"y\": pm})\r\n        \r\n      }\r\n      //console.log(mdcMessage);\r\n      setChartData2({\r\n        labels:pmMessage,\r\n        datasets: [\r\n          {\r\n            label:\"Fleet Status- Last 7 days\",\r\n            data:pmMessage,\r\n            backgroundColor: \"#d8e4f0\",\r\n            borderWidth: 2,\r\n            borderColor: \"black\",\r\n            pointRadius: 5\r\n          }\r\n        ]\r\n      });\r\n    })\r\n    .catch(err => {\r\n      //console.log(err);\r\n    });\r\n \r\n \r\n  \r\n\r\n//  function save(e) {\r\n//     //save to png\r\n//     const canvasSave = document.getElementById('chart1');\r\n//     canvasSave.toBlob(function (blob) {\r\n//         saveAs(blob, \"Chart1.png\")\r\n//     })\r\n// }\r\n\r\n// const [data_chart1, setData_chart1] = useState({\r\n//   select_date:\"\"\r\n//   });\r\n\r\n//   function submit(e){\r\n//     e.preventDefault();\r\n//     let mdcMessage = [];\r\n    \r\n\r\n//     const path='http://localhost:8000/scatter_chart_MDC_PM/'+data_chart1.select_date;\r\n//     //console.log(path);\r\n//     axios.post(path)\r\n//       .then(res => {\r\n//        // console.log(res,\"response\");\r\n        \r\n//         for (const dataObj of JSON.parse(res.data)) {\r\n//           let mdc = parseInt(dataObj. MDC_Message_Cnt)\r\n//           let pm = parseInt(dataObj.MX_actions)\r\n//           mdcMessage.push({\"x\": mdc, \"y\": pm})\r\n         \r\n//         }\r\n//         console.log(mdcMessage);\r\n//         setChartData1({\r\n//           labels:mdcMessage,\r\n//           datasets: [\r\n//             {\r\n//               label:\"Fleet Status- Last 7 days\",\r\n//               data: mdcMessage,\r\n//               backgroundColor: \"#d8e4f0\",\r\n//               borderWidth: 2,\r\n//               borderColor: \"black\",\r\n//               pointRadius: 5\r\n\r\n//             }\r\n//           ]\r\n//         });\r\n//       })\r\n//       .catch(err => {\r\n//         //console.log(err);\r\n//       });\r\n    \r\n//   }\r\n//   function handle(e){\r\n//     const newdata={...data_chart1}\r\n//     newdata[e.target.id] = e.target.value\r\n//     setData_chart1(newdata)\r\n//     //console.log(newdata)\r\n\r\n//   }\r\n\r\n  \r\n\r\n\r\n  return (\r\n    \r\n    <div className={classes.root}>\r\n      <Grid container spacing={12}>\r\n      <Grid item xs={12}>\r\n      <Paper className={classes.paper}>\r\n      <Scatter\r\n                    id=\"chart1\"\r\n                    data={chartData2}\r\n                    options={{\r\n                      scales: {\r\n                        xAxes: [{\r\n                            type: 'linear',\r\n                            scaleLabel: {\r\n                              display: true,\r\n                              labelString: '# of MDC Messages- Last 7 days',\r\n                                  fontStyle: 'bold',\r\n                                  fontColor: '#001C3E'\r\n                                \r\n                            },\r\n                            position: 'bottom'\r\n                        }],\r\n                        yAxes: [ {\r\n                          display: true,\r\n                          scaleLabel: {\r\n                            display: true,\r\n                            labelString: '# of MX Actions- Last 7 days',\r\n                            fontStyle: 'bold',\r\n                                  fontColor: '#001C3E'\r\n                          }\r\n                        } ],\r\n                      title: { display: true, text: 'Scatter Plot', fontSize: 20 },\r\n                      legend: { display: true, position: 'right' }\r\n                    }}}\r\n                  />\r\n      </Paper>    \r\n        </Grid>\r\n        </Grid>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}